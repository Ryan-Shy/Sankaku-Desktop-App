/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Apply the javaFX plugin
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    // add zip4j dependency
    implementation 'net.lingala.zip4j:zip4j:2.11.5'
    // add apache commons io
    // https://mvnrepository.com/artifact/commons-io/commons-io
	implementation 'commons-io:commons-io:2.13.0'
	// add Jackson lib for JSON parsing
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
	// add javafx
	implementation 'org.openjfx:javafx:21-ea+23'
}

javafx {
    version = "20"
    modules = [ 'javafx.controls' ]
}

sourceSets {
	updater {
		java {
			srcDirs += [
				'src/updater/java/'
			]
		}
		resources {
			srcDirs += [
				'src/updater/resources/'
			]
		}
		compileClasspath += sourceSets.main.runtimeClasspath
	}
}

application {
    // Define the main class for the application.
    mainClass = 'ryanshy.sankaku_desktop_app.App'
}

task updaterJar(type: Jar) {
	from sourceSets.updater.output
	manifest {
		attributes 'Main-Class': 'ryanshy.sankaku_desktop_updater.Updater'
	}
	archiveBaseName = 'Sankaku-Desktop-Updater'
	archiveVersion = '0.0.1'
	
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from {
		configurations.runtimeClasspath.collect {
			if(it.getName().contains("jackson")
				|| it.getName().contains("zip4j") 
				|| it.getName().contains("commons-io")) {
				it.isDirectory() ? it : zipTree(it)
			}
		}
	}
	with jar
}

distributions {
	main {
		contents {
			from ('build/libs') {
				include '*Updater*.jar'
			}
		}
	}
}

tasks.named('jar') {dependsOn('updaterJar')}

jar {
	manifest {
		attributes 'Main-Class': application.mainClass
	}
	archiveVersion = '0.0.1'
}